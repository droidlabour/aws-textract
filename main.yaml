AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Textract workflow
Parameters:
  VariableFileName:
    Description: Variable file name, [YOU NEED TO UPLOAD THIS FILE AFTER THE CFN STACK IS SUCCESFULLY CREATED]
    Type: String
    Default: Variables.txt
  TableName:
    Description: DynamoDB table name
    Type: String
    AllowedPattern: '[a-z\-]+'
    Default: textract-result
  S3BucketName:
    Description: S3 Bucket name where PDF files & Variable file will be stored
    AllowedPattern: '[a-z0-9\-]+'
    Type: String
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: StartDocTxtLambdaInvokePermission
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Function: !GetAtt StartDocTxtLambda.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: pdf
  StartDocTxtLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - StartDocTxtLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Join
        - ''
        - - 'arn:aws:s3:::'
          - !Ref S3BucketName
  StartDocTxtLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import os
          import sys
          import shutil
          import logging
          from urllib.parse import unquote_plus
          from pip._internal import main as pipmain


          # Install latest boto3 instead the pre-installed version which doesn't have textract support
          vendor = '/tmp/vendor'

          if os.path.exists(vendor):
              shutil.rmtree(vendor)
          os.makedirs(vendor)

          pipmain(['install', '--upgrade', '--no-cache-dir', 'boto3', '-t', vendor, '--force-reinstall'])
          here = os.path.dirname(os.path.realpath(__file__))
          sys.path.insert(0, os.path.join(here, vendor))

          import boto3

          log    = logging.getLogger(__name__)
          client = boto3.client('textract')

          def lambda_handler(event, context):
              log.info('Event: %s', event)

              for record in event['Records']:
                  key    = unquote_plus(record['s3']['object']['key'])
                  bucket = record['s3']['bucket']['name']
                  log.info('Key: %s', key)

                  r = client.start_document_text_detection(
                          DocumentLocation={
                              'S3Object': {
                                  'Bucket': bucket,
                                  'Name': key
                              }
                          },
                          NotificationChannel={
                              'SNSTopicArn': os.getenv('SNS_TOPIC_ARN'),
                              'RoleArn': os.getenv('IAM_ROLE_INVOKE_SNS')
                          }
                      )
                  log.info('JobId for %s is %s', key, r['JobId'])

              log.info('Finished: %s', event)
              return 0
      Role:
        'Fn::GetAtt':
          - StartDocTxtLambdaExecRole
          - Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref StartDocumentTextDetectionSns
          IAM_ROLE_INVOKE_SNS:
            'Fn::GetAtt':
            - TextractInvokeSnsRole
            - Arn
      Runtime: python3.7
      Timeout: 120
      MemorySize: 256
  StartDocTxtLambdaExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        -
          PolicyName: 'StartDocumentTextDetection'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action: 'textract:StartDocumentTextDetection'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  TextractInvokeSnsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - textract.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonTextractServiceRole
  StartDocumentTextDetectionSns:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: AmazonTextract_StartDocumentTextDetection
  StartDocumentTextDetectionSnsSub:
    Type: AWS::SNS::Subscription
    DependsOn: GetDocTxtLambdaInvokePermission
    Properties:
      Endpoint: !GetAtt GetDocTxtLambda.Arn
      Protocol: lambda
      TopicArn: !Ref StartDocumentTextDetectionSns
  GetDocTxtLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt
        - GetDocTxtLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref StartDocumentTextDetectionSns
  GetDocTxtLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import os
          import re
          import sys
          import json
          import shutil
          import logging
          from urllib.parse import unquote_plus
          from pip._internal import main as pipmain


          # Install latest boto3 instead the pre-installed version which doesn't have textract support
          vendor = '/tmp/vendor'

          if os.path.exists(vendor):
              shutil.rmtree(vendor)
          os.makedirs(vendor)

          pipmain(['install', '--upgrade', '--no-cache-dir', 'boto3', '-t', vendor, '--force-reinstall'])
          here = os.path.dirname(os.path.realpath(__file__))
          sys.path.insert(0, os.path.join(here, vendor))

          import boto3

          log      = logging.getLogger(__name__)
          client   = boto3.client('textract')
          s3       = boto3.resource('s3')
          dynamodb = boto3.resource('dynamodb')

          variable_fname = '/tmp/Variables.txt'
          s3.meta.client.download_file(
              os.getenv('VARIABLE_BUCKET'),
              os.getenv('VARIABLE_FILE_PATH'),
              variable_fname
          )
          with open(variable_fname) as f:
              variables = f.read().splitlines()

          table = dynamodb.Table(os.getenv('TABLE_NAME'))

          def lambda_handler(event, context):
              log.info('Event: %s', event)
              results = []

              for record in event['Records']:
                  msg    = json.loads(record['Sns']['Message'])
                  job_id = msg['JobId']
                  bucket = msg['DocumentLocation']['S3Bucket']
                  key    = msg['DocumentLocation']['S3ObjectName']
                  log.info('JobId: %s, Bucket: %s, Key: %s', job_id, bucket, key)

                  r = client.get_document_text_detection(JobId=job_id)
                  blocks = []
                  while True:
                      for i in r['Blocks']:
                          if 'Text' in i.keys():
                              blocks.append(i)
                      if 'NextToken' not in r.keys():
                          break
                      r = client.get_document_text_detection(JobId=job_id, NextToken=r['NextToken'])

                  # For debugging
                  # Write entire textextract block to S3
                  '''with open(variable_fname, 'w') as f:
                      f.write(json.dumps(blocks, indent=4))
                  s3.meta.client.upload_file(variable_fname, bucket, job_id)'''

                  result = {}
                  for i in variables:
                      log.info('Searching %s', i)
                      x = i.split()
                      counter = 0 if len(x) == 1 else len(x)
                      log.info('Counter %s', counter)

                      for idx, block in enumerate(blocks):
                          if x[0].lower() == block['Text'].lower():
                              log.info('Found: First token: %s', x[0])
                              next_idx = idx
                              for r in range(1, counter):
                                  next_idx += 1
                                  if x[r].lower() == blocks[next_idx]['Text'].lower():
                                      log.info('Consecutive token found at %s index, token: %s', r, x[r])
                                      consec_match = True
                                  else:
                                      log.info('Consecutive match not found for %s', i)
                                      consec_match = False
                                      break

                              if consec_match:
                                  val = re.sub('[^0-9]', '', blocks[next_idx+1]['Text'])
                                  if not val:
                                      continue
                                  log.info('Variable %s found with val %s', i, val)
                                  result[i] = val
                                  result['filename'] = key
                                  break
                  results.append(result)

              for result in results:
                  table.put_item(Item=result)

              log.info('Saved to database results: %s', results)
              log.info('Finished: %s', event)
              return 0
      Role:
        'Fn::GetAtt':
          - GetDocTxtLambdaExecRole
          - Arn
      Environment:
        Variables:
          VARIABLE_BUCKET: !Ref S3Bucket
          VARIABLE_FILE_PATH: !Ref VariableFileName
          TABLE_NAME: !Ref TableName
      Runtime: python3.7
      Timeout: 900
      MemorySize: 512
  GetDocTxtLambdaExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        -
          PolicyName: 'GetDocumentTextDetection'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action: 'textract:GetDocumentTextDetection'
                Resource: '*'
        -
          PolicyName: 'DynamoDBTextract'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action: 'dynamodb:*'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        -
          AttributeName: filename
          AttributeType: S
      KeySchema: 
        -
          AttributeName: filename
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref TableName


Outputs:
  S3BucketName:
    Description: S3 bucket name
    Value: !Ref S3Bucket
  TableName:
    Description: DynamoDB table name
    Value: !Ref TableName
